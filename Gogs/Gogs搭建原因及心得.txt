    Gogs:之前搭建了GitLab和GitBlit之后,了解到这个用Go语言写的Gogs版本控制系统很流行.(Go语言编写,单文件部署,消耗系统资源小)
    
    搭建:这次搭建Gogs还是是用Docker来起,因为没有中文汉化包哪些麻烦的东西,docker起停还是更加方便.
        (1)拉取镜像  docker pull gogs/gogs
        (2)给Gogs创建一个文件夹(ps:建立是为了进行目录挂载映射,方便修改配置文件,当然你不建立使用docker exec -ti "gogs服务名" bash进入容器内部更改配置文件也行)
        (3)docker run.这里就是做一些端口映射目录挂在之类的docker基本参数了.
        (4)docker pull mysql (gogs默认使用mysql做数据存储,当然你不用docker起用linux上搭建的mysql也当是没有问题的).
        (5)进入Gogs首页(首次进入配置数据库坐标账号密码/应用名称端口等等).
        (6)进入Gogs系统(与GitLab和GitBlit不同的是Gogs第一次配置的时候可以选择创建管理员,如果不创建的话默认你第一个注册的用户为管理员).接下来就和GitLab/GitBlit
           差不多的了,我还是创建仓库,linux虚拟机和windows宿主机clone后测试提交,没有问题.剩下的就是跟前面一样的了,熟悉Gogs的其他系统功能.
     
   总结:1.Gogs搭建特别的快,主要是家里网速快吧?下载速度10m/s...docker镜像源配置的国内的阿里源,比GitBlit多配置一个docker的数据库,需要先mysql建个库给Gogs首次加载时配置.
          然后的话对比GitLab/GitBlit,更小消耗系统资源很少吧?这次三种Git版本仓库搭建下来,我根据自己阅读的资料和网上的说明,一个不是特别大的团队使用Gogs
        的话非常不错,另外Gogs也是不支持在线编辑的.
        2.集中流行的版本仓库我在网上给大家找了两张图说明,大家如果想更清楚的了解GitLab/GitBlit/Gogs的区别,可以详见图.另外此次的三种Git仓库管理系统的搭建也就告一
          段落了,搭建过程中挺顺利的,也都是些跟着教程走在我能力范围内的基本操作.
        3.剩下就还有三个思考问题了:
         (1)版本仓库搭建在远程服务器和本地小组的通信.(IP+端口的情况)
         (2)服务器有域名再和本地的通信问题(这个应该和第一个属于差不多的问题,主要是以前自己没有机会尝试去做,这个也是需要我应该学习的).
         (3)另外就是老问题了,三种版本管理系统用得熟练一些,优劣心中有数,哪种情形该答哪个(公司大小/是否需要邮件/费用/团队大小/是否跨团队协作开发等等)
         
 
    